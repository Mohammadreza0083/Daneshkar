// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using aspnetcore8.Data;

#nullable disable

namespace aspnetcore8.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231008154348_SampleTpt")]
    partial class SampleTpt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("PersonSequence");

            modelBuilder.Entity("aspnetcore8.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [PersonSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("aspnetcore8.Models.PersonTpt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonTpt");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("aspnetcore8.Models.Student", b =>
                {
                    b.HasBaseType("aspnetcore8.Models.Person");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("aspnetcore8.Models.Teacher", b =>
                {
                    b.HasBaseType("aspnetcore8.Models.Person");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("PropertyX")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("aspnetcore8.Models.StudentTpt", b =>
                {
                    b.HasBaseType("aspnetcore8.Models.PersonTpt");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("StudentsTpt", (string)null);
                });

            modelBuilder.Entity("aspnetcore8.Models.TeacherTpt", b =>
                {
                    b.HasBaseType("aspnetcore8.Models.PersonTpt");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("PropertyX")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TeachersTpt", (string)null);
                });

            modelBuilder.Entity("aspnetcore8.Models.StudentTpt", b =>
                {
                    b.HasOne("aspnetcore8.Models.PersonTpt", null)
                        .WithOne()
                        .HasForeignKey("aspnetcore8.Models.StudentTpt", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aspnetcore8.Models.TeacherTpt", b =>
                {
                    b.HasOne("aspnetcore8.Models.PersonTpt", null)
                        .WithOne()
                        .HasForeignKey("aspnetcore8.Models.TeacherTpt", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
